/*
 *
 *
 */
#ifndef __CAT_010_ASTERIX_INCLUDED__
#define __CAT_010_ASTERIX_INCLUDED__

#include <sys/types.h>
#include "common_lib_asterix.h"


#ifdef __cplusplus
extern "C" {
#endif

/**
 *  @brief Признак типа транспортного средства
 */
enum Cat10TargetReportVehicleType
{

	TRD_VEHICLE_TYPE_UNKNOWN        = 0,               //!< - не определен
	TRD_VEHICLE_TYPE_AIRCRAFT       = 1,               //!< - самолет
	TRD_VEHICLE_TYPE_GROUND_VEHICLE = 2,               //!< - наземное ТС
	TRD_VEHICLE_TYPE_HELICOPTER     = 3                //!< - вертолет
};

enum Cat10MessageType
{

	MESSAGE_TYPE_TRACK               = 1,              //!< Тип сообщения кат 010 - трасса
	MESSAGE_TYPE_START_UPDATE_CIRCLE = 2,              //!< Тип сообщения кат 010 - начало обновления данных
	MESSAGE_TYPE_PERIODIC_STATUS_MSG = 3,              //!< Тип сообщения кат 010 - периодическое сообщение о состоянии
	MESSAGE_TYPE_EVENT_STATUS_MSG    = 4               //!< Тип сообщения кат 010 - событийное сообщение об изменении состояния
};

enum Cat10MovementModeType
{

	MOVEMENT_MODE_UNKNOWN  = 0,                        //!< Вид движения цели - не известен
	MOVEMENT_MODE_TAKE_OFF = 1,                        //!< Вид движения цели - взлет
	MOVEMENT_MODE_LANDING  = 2,                        //!< Вид движения цели - посадка
	MOVEMENT_MODE_OTHER    = 3                         //!< Вид движения цели - иной тип движения
};

/**
 *  @brief Вид качества сопровождения цели
 */
enum Cat10DoubtModeType
{

	DOUBT_MODE_NO_DOUBT                      = 0,      //!< - устойчивое сопровождение
	DOUBT_MODE_DOUBTFULL_CORRELATION         = 1,      //!< - сомнительная корреляция(без подтверждения)
	DOUBT_MODE_DOUBTFULL_CORRELATION_CLUTTER = 2,      //!< - сомнительная корреляция в условиях помех
	DOUBT_MODE_LOST_ACCURACY                 = 3,      //!< - снижение точности
	DOUBT_MODE_LOST_ACCURACY_CLUTTER         = 4,      //!< - снижение точности в условиях помех
	DOUBT_MODE_LOST_UNSTABLE_TRACK           = 5,      //!< - не стабильная трасса
	DOUBT_MODE_LOST_EARLY_COASTED            = 6       //!< - продолжение экстраполяции
};

/**
 *  @brief Признак слияния трассы с отметкой
 */
enum Cat10MergeModeType
{

	MERGE_MODE_UNDETERMINED            = 0,            //!< - индикация о слиянии отсутствует
	MERGE_MODE_ASSOCIATION_TO_PLOT     = 1,            //!< - трасса подтверждена отметкой
	MERGE_MODE_NOT_ASSOCIATION_TO_PLOT = 2,            //!< - трасса без подтверждения отметкой
	MERGE_MODE_SPLIT_TRACK             = 3             //!< - разделение трассы
};

/**
 *  @brief Признак источника данных о цели
 *          (дескриптор описания цели)
 */
enum Cat10TargetReportSourseType
{

	TRD_SOURCE_TYPE_SSR_MLAT      = 0,                 //!< - мультилатерациия по данным ВРЛ
	TRD_SOURCE_TYPE_ModeS_MLAT    = 1,                 //!< - мультилатерациия по данным Mode S
	TRD_SOURCE_TYPE_ADS_B         = 2,                 //!< - мультилатерациия по данным ADS-B
	TRD_SOURCE_TYPE_PSR           = 3,                 //!< - первичный радиолокатор
	TRD_SOURCE_TYPE_MAGNETIC_LOOP = 4,                 //!< - система пеленгации
	TRD_SOURCE_TYPE_HF_MLAT       = 5,                 //!< - мультилатерациия по данным УКВ
	TRD_SOURCE_TYPE_NOT_DEFINED   = 6,                 //!< - не определен
	TRD_SOURCE_TYPE_OTHER         = 7                  //!< - по данным других источников
};


/**
 * @brief Определение структуры данных категории 010 Астерикс
 */
typedef struct TCat010 TCat010;

/**
 * @brief Структура данных для категории Астерикс 010
 *        состояние системы
 */
typedef struct SystemStatus
{
	/**
	 * @brief Операционное состояние
	 *        0 - в работе
	 *        1 - ухудшение состояния системы
	 *        2 - отказ
	 */
	u_int8_t operation_status;
	/**
	 * @brief Операционное состояние
	 *        0 - в работе
	 *        1 - перегрузка системы
	 */
	u_int8_t overload;
	/**
	 * @brief Состояние источника времени
	 *        0 - в работе
	 *        1 - отказ источника времени
	 */
	u_int8_t time_source_valid;
	/**
	 * @brief Операционное состояние
	 *        0 - в работе
	 *        1 - ухудшение точности определения (разброс)
	 */
	u_int8_t diversity;
	/**
	 * @brief Cостояние по результатам тестов
	 *        0 - тест по контрольной цели пройден
	 *        1 - отказ теста по контрольной цели
	 */
	u_int8_t test_target_fail;

}SystemStatus;

/**
 * @brief Структура данных для категории Астерикс 010
 *        Описание сообщения о трассе (отметке)
 */
typedef struct TargetReportDescriptor
{
	/**
	 * @brief Тип источника данных о цели
	 *        по определителю TRD_SOURCE_TYPE_xxxx
	 */
	u_int8_t source_type;
	/**
	 * @brief Признак наличия дифференциальной коррекции (для ADS-B)
	 *        0 - нет коррекции
	 *        1 - есть коррекция
	 */
	u_int8_t differencial_correction;
	/**
	 * @brief Признак принадлежности к цепочке 1 или 2 вида
	 *        0 - цепочка 1
	 *        1 - цепочка 2
	 */
	u_int8_t chain1_2;
	/**
	 * @brief Выставление в передатчике признака нахождения на земле
	 *        0 - не установлен
	 *        1 - установлен
	 */
	u_int8_t ground_bit_set;
	/**
	 * @brief Признак искажения ответных сообщений в системе мультилатерации
	 *        0 - не искажений
	 *        1 - есть искажения
	 */
	u_int8_t corrupted_reply;
	/**
	 * @brief Признак эталонной цели
	 *        0 - реальная цель
	 *        1 - эталонная цель
	 */
	u_int8_t simulated_target;
	/**
	 * @brief Признак эталонной цели
	 *        0 - реальная цель
	 *        1 - тестовая цель
	 */
	u_int8_t test_target;
	/**
	 * @brief Признак от подвижной цели
	 *        0 - подвижная цель
	 *        1 - стационарный передатчик
	 */
	u_int8_t rab;
	/**
	 * @brief Признак цикла обновления данных о цели
	 *        0 - цикл обновления не задан
	 *        1 - начало цила обновления
	 *        2 - конец цила обновления
	 */
	u_int8_t loop_status;

	/**
	 * @brief Признак цикла обновления данных о цели
	 *        TRD_VEHICLE_TYPE_xxxxx
	 */
	u_int8_t vehicle_type;
	/**
	 * @brief Признак выставления сигнала SPI от цели
	 *        0 - сигнал отсутствует
	 *        1 - сигнал получен
	 */
	u_int8_t spi_set;

}TargetReportDescriptor;

/**
 * @brief Структура данных для передачи статуса трассы
 *        категории 010
 */
typedef struct TrackStatus010
{
	/**
	 * @brief Признак подтверждения (обновления) данных
	 *          0 - данные подтверждаюся
	 *          1 - данные предположительные (экстраполяция отметки)
	 */
	u_int8_t confirm;
	/**
	 * @brief Признак эталонной (имитированной) трассы
	 *          0 - действительная трасса
	 *          1 - имитированная трасса
	 */
	u_int8_t simulate;
	/**
	 * @brief Признак последнего сообщения о трассе
	 *          0 - значение по умолчанию, обновление информации
	 *          1 - последнее сообщение, сброс трассы с сопровождения
	 */
	u_int8_t last_message;
	/**
	 * @brief Признак первого сообщения о трассе
	 * 0 - значение по умолчанию, обновление информации
	 * 1 - первое сообщение, новая трасса на сопровождении
	 */
	u_int8_t first_message;
	/**
	 * @brief Признак устаревания времени последнего полученного обновления
	 *           трека больше порога времени работного(инерции) системы
	 *           0 - значение по умолчанию, трасса обновляется
	 *           1 - трасса не обновлялась, экстраполяция трассы
	 */
	u_int8_t coast_track;

	/**
	 * @brief Признак маневра в горизонтальной плоскости (по Х, У)
	 *           0 - нет маневра
	 *           1 - есть маневр
	 */
	u_int8_t horizontal_manoeuvre;

	/**
	 * @brief Признак пересчета наклонных координат положения цели
	 *        на горизонтальную плоскость (для Х, У)
	 *           0 - нет пересчета
	 *           1 - есть пересчет
	 */
	u_int8_t slant_correction;

	/**
	 * @brief Признак преобразования координат положения цели
	 *        (для Х, У)
	 *        0 - данные результатов измерения
	 *        1 - сглаженные данные
	 */
	u_int8_t smooth_position;

	/**
	 * @brief Признак режима передвижения цели
	 *          MOVEMENT_MODE_xxxx
	 */
	u_int8_t movement_mode;

	/**
	 * @brief Признак снижения качества сопровождения цели
	 *          DOUBT_MODE_xxxx
	 */
	u_int8_t doubt;

	/**
	 * @brief Признак снижения качества сопровождения цели
	 *          MERGE_MODE_xxxx
	 */
	u_int8_t merge;

	/**
	 * @brief Признак ложной трассы
	 *           0 - подтвержденная трасса
	 *           1 - ложная трасса
	 */
	u_int8_t ghost_track;

}TrackStatus010;


/**
 * @brief Структура данных позиции яркой точки относительно
 *        координатной отметки
 *        категории 010
 */
typedef struct PresencePositionPolar
{
	/**
	 * @brief Позиция по азимуту относительно координат отметки
	 *        допустимый диапазон от -19.5 до 19.5 градусов
	 *        (значения укладываются в радианах)
	 */
	double azimuth;
	/**
	 * @brief Позиция по дальности относительно координат отметки
	 *        допустимый диапазон от -127 до 127 метров
	 */
	double distance;
}PresencePositionPolar;

/**
 * @brief Структура данных для передачи облака ярких точек отметки
 *        категории 010
 */
typedef struct PresenceData
{
	/**
	 * @brief Счетчик количества записей ярких точек
	 */
	u_int8_t presence_count;
	/**
	 * @brief Структура записи ярких точек
	 */
	PresencePositionPolar* presence_recs;
}PresenceData;


/**
 * @brief Выдача указателя на структуру категории 010 из
 *        обобщенной структуры Астерикс
 * @param cat - указатель на структуру Астерикс
 * @return указатель на структуру категории 010 Астерикс,
 *         при отказе значение NULL
 */
TCat010* get010category(TCatAsterix* cat);

/**
 * @brief Запись типа сообщения в структуру категории
 * @param cat_lib - указатель на структуру категории 010
 * @param type_message - тип сообщения
 * @return 0 - операция выполнена, -1 отказ исполнения
 */
int set010MessageType(TCat010* cat, u_int8_t type_message);
/**
 * @brief Запрос типа сообщения из структуры категории 010
 * @param cat_lib - указатель на структуру категории 010
 * @return  - структура данных возврата:
 *         переменная val - содержит значение типа сообщения
 */
TReturnOneInt get010MessageType(TCat010* cat);

/**
 * @brief Запись типа выполняемого задания в структуру категории
 * @param cat_lib - указатель на структуру категории 010
 * @param type_mission  - тип выполняемого задания
 * @param trouble       - признак препятствия исполнению задания
 *                        0 - препятствий нет
 *                        1 - есть проблемы
 * @return 0 - операция выполнена, -1 отказ исполнения
 */
int set010PreprogrammedMessage(TCat010* cat, u_int8_t type_mission, u_int8_t trouble);
/**
 * @brief Запрос типа выполняемого задания из структуры категории 010
 * @param cat_lib - указатель на структуру категории 010
 * @return  - структура данных возврата:
 *         переменная val1 - содержит значение типа выполняемого задания
 *         переменная val2 - содержит признак препятствия исполнению задания
 *                              0 - препятствий нет
 *                              1 - есть проблемы
 */
TReturnPairInt get010PreprogrammedMessage(TCat010* cat);
/**
 * @brief Упаковка записи категории 010 (ed.1.1 March 2007) Астерикс
 * @param cat - указатель на структуру категории 010
 * @return - указатель на структуру с кодированными данными записи категории Астерикс
 */
TCommonObmenData* pack010catRecord(TCat010* cat);
/**
 * @brief Распаковка записи категории 010(ed.1.1 March 2007) формата АСТЕРИКС
 * @param codogramm - указатель на стурктуру обмена с кодограммой АСТЕРИКС
 * @param current_pos - номер позиционного байта начала записи в кодограмме
 * @return - указатель на структуру категории Астерикс
 */
TCatAsterix* decode010catRecord(TCommonObmenData* codogramm, size_t* current_pos);

/**
 * @brief Запись данных описателя цели в структуру категории
 * @param cat - указатель на структуру категории 010
 * @param target_descriptor  - указатель на структуру описателя цели
 * @return 0 - операция выполнена, -1 отказ исполнения
 */
int set010TargetReportDescriptor(TCat010* cat, TargetReportDescriptor* target_descriptor);

/**
 * @brief Запись данных статуса цели в структуру категории
 * @param cat - указатель на структуру категории 010
 * @param trs_tatus  - указатель на структуру статуса цели
 * @return 0 - операция выполнена, -1 отказ исполнения
 */
int set010TrackStatus(TCat010* cat, TrackStatus010* trs_tatus);

/**
 * @brief Запись "сырых" данных полученных от приемника Mode S в структуру категории
 * @param cat - указатель на структуру категории 010
 * @param mbDataMass  - указатель данные с сообщениями Mode S
 *                      (содержимое заполняется пользователем в формате указанном в
 *                       стандарта категории 010)
 * @return 0 - операция выполнена, -1 отказ исполнения
 */
int set010ModeSMBdata(TCat010* cat, TCommonObmenData* mbDataMass);

/**
 * @brief Запись данных о состоянии системы обработки РЛИ в структуру категории
 * @param cat - указатель на структуру категории 010
 * @param sys_stat  - указатель на структуру технического состояния системы
 * @return 0 - операция выполнена, -1 отказ исполнения
 */
int set010systemStatus(TCat010* cat, SystemStatus* sys_stat);

/**
 * @brief Запись данных об амплитуде эха координатной точки в структуру категории
 * @param cat - указатель на структуру категории 010
 * @param plot_amplitude  - значение амплитуды эха координатной точки
 *                          передается в  у.е. от 0 .... 255.
 *                          0 - уровень собственных шумов приемника
 *                          255 - макимум сигнала на выходе приемника
 * @return 0 - операция выполнена, -1 отказ исполнения
 */
int set010plotAmplitude(TCat010* cat, u_int8_t plot_amplitude);

/**
 * @brief Выборка данных описателя цели из структуры категории
 * @param cat - указатель на структуру категории 010
 * @return - структура описателя цели, NULL - данные отсутствуют
 */
TargetReportDescriptor* get010TargetReportDescriptor(TCat010* cat);
/**
 * @brief Выборка данных статуса трассы из структуры категории
 * @param cat - указатель на структуру категории 010
 * @return - указатель на структуру статуса трассы, NULL - данные отсутствуют
 */
TrackStatus010* get010TrackStatus(TCat010* cat);
/**
 * @brief Запрос данных о состоянии системы обработки РЛИ из структуры категории
 * @param cat - указатель на структуру категории 010
 * @return - указатель на структуру технического состояния системы
 *           NULL - если данные отсутствуют
 */
SystemStatus* get010systemStatus(TCat010* cat);

/**
 * @brief Запрос данных об амплитуде эха координатной точки из структуры категории
 * @param cat - указатель на структуру категории 010
 * @return  - структура данных возврата:
 *         переменная val1 - значение амплитуды эха координатной точки
 *                           передается в  у.е. от 0 .... 255.
 *                           0 - уровень собственных шумов приемника
 *                           255 - макимум сигнала на выходе приемника
 */
TReturnOneInt get010plotAmplitude(TCat010* cat);
/**
 * @brief Запрос данных о содержимом FSPEC записи
 * @param cat - указатель структуру категории 010
 * @return - указатель на массив с байтами FSPEC записи
 */
u_int8_t* get010recordFspec(TCat010* cat, size_t* size);

/**
 * @brief Запрос "сырых" полученных данных приемника Mode S из структуры категории
 * @param cat - указатель на структуру категории 010
 * @return - указатель на данные с сообщениями Mode S
 *           (содержимое разбирается пользователем в формате указанном в
 *            стандарте категории 010),
 *            при возврате NULL данные отсутствуют
 */
TCommonObmenData* get010ModeSMBdata(TCat010* cat);
/**
 * @brief Запись данных об облаке ярких точек отметки в структуру категории
 * @param cat - указатель на структуру категории 010
 * @param presence  - указатель на структуру с облаком ярких точек
 * @return 0 - операция выполнена, -1 отказ исполнения
 */
int set010PresenceData(TCat010* cat, PresenceData* presence);
/**
 * @brief Выборка данных об облаке ярких точек отметки
 * @param cat - указатель на структуру категории 010
 * @return - указатель на структуру с облаком ярких точек
 * @remarks - освобождение памяти через вызов функции freePresenceData()
 */
PresenceData* get010PresenceData(TCat010* cat);
/**
 * @brief Освобождение памяти после использования структуры PresenceData
 * @param pres - указатель на структуру PresenceData
 * @return - EXIT_SUCCESS - успешном выполнении, EXIT_FAILURE - отказ выполнения
 */
int freePresenceData(PresenceData* pres);

/**
 * @brief Выборка "сырых" данных из записи категории 010 без распаковки
 * @param codogramm - указатель на контейнер с кодограммой
 * @param current_pos - начальное положение первого байта записи в теле кодограммы
 * @return - указатель на структуру контейнер Астерикс
 */
TCatAsterix* get010recordRawData(TCommonObmenData* codogramm, u_int64_t current_pos);


#ifdef __cplusplus
}
#endif

#endif
